* Running
  
In order to build the container from the Dockerfile, we first need to build it. We associate it the ~flow~ tag:
  
#+begin_src sh
sudo docker build -t flow .
#+end_src

In order to run the container, invoque the following instructions. The current directory (~$(pwd)~ on Linux) will be bind mounted to ~/host~ allowing the user to modify the project from the host machine and run it from the docker. We also bind mount ~./ray_results~ (host) to ~/root/ray_results~ (container) which allow to interact with the results (/e.g./ running Tensorboard) from the host. There is also some Linux display wizardry going on with X11 allowing to set the ~render~ flag to ~True~ in ~IssyExperimentParams~ and have the Sumo GUI appear on the host machine:

#+begin_src sh
# allow connection to x11 server from docker
xhost +

# run sumo.py in dockerised sumo-gui
mkdir -p ray_results && sudo docker run -e DISPLAY=$DISPLAY -v /tmp/.X11-unix:/tmp/.X11-unix --privileged -ti --mount src="$PWD/ray_results",target=/root/ray_results,type=bind --mount src="$(pwd)",target=/host,type=bind flow /bin/bash -c "source /root/.bashrc && python /host/src/flow/issy.py"
#+end_src

In order to open a shell inside the docker image with graphic support, run the following command.

#+begin_src sh
xhost +
mkdir -p ray_results && sudo docker run -e DISPLAY=$DISPLAY -v /tmp/.X11-unix:/tmp/.X11-unix --privileged -ti --mount src="$PWD/ray_results",target=/root/ray_results,type=bind --mount src="$(pwd)",target=/host,type=bind flow /bin/bash
#+end_src

** Tensorboard

To see training results in Tensorboard, call it from the host after having ensured you have the appropriate permissions as follows:

#+begin_src sh
sudo chmod -R +777 ray_results
tensorboard --logdir ray_results
#+end_src

* État de l'art
  
** Acquisition de données

- https://opentraffic.io
- https://github.com/graphhopper/open-traffic-collection
- https://www.stadt-koeln.de/externe-dienste/open-data/traffic.php
- https://developer.here.com/documentation/traffic/topics_v6.1/resource-parameters-flow.html (owned my Nokia Maps)
- http://www.pressreleasepoint.com/machine-learning-help-optimize-traffic-and-reduce-pollution
- http://cs229.stanford.edu/proj2005/RobinsonMosherEgner-LearningTrafficLightControlPolicies.pdf
- https://www.vegvesen.no/_attachment/336339/binary/585485
- https://data.transportation.gov/Automobiles/Next-Generation-Simulation-NGSIM-Vehicle-Trajector/8ect-6jqj
- https://archive.ics.uci.edu/ml/datasets/Taxi+Service+Trajectory+-+Prediction+Challenge,+ECML+PKDD+2015
- https://catalog.data.gov/dataset?q=traffic

** Simulation de données

- http://www.traffic-simulation.de/
  + code source: https://github.com/movsim/traffic-simulation-de
- http://sumo.dlr.de/index.html
  + Sumo interaction API in python: http://www.sumo.dlr.de/daily/pydoc/traci.html

** Traffic flow prediction

- https://arxiv.org/pdf/1710.01695.pdf
- https://www.sciencedirect.com/science/article/pii/S0952197611000777#f0005
- https://www.sciencedirect.com/science/article/pii/S0952197617302658?via%3Dihub
- https://www.sciencedirect.com/science/article/pii/S0968090X00000474
- https://hal.archives-ouvertes.fr/hal-01163018/document

** Keywords

Useful for google searches:

- Traffic smoothing
